{"version":3,"file":"EchoPlugin.js","sourceRoot":"/","sources":["../plugins/echo/src/EchoPlugin.ts"],"names":[],"mappings":";AACA;;;;;;;;;;;;;;EAcE;;;AAEF,wCAIuB;AAEvB,MAAa,UAAW,SAAQ,iBAAU;IACnB,MAAM;QACrB,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,OAAe;QAC7B,IAAI,CAAC,GAAoB,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,kBAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC9E,OAAO,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;IAChC,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAA0B;QAC7C,IAAI,UAAU,GAAW,IAAI,CAAC,eAAe,CAAC,CAAC,OAAe,EAAE,EAAE;YAC9D,EAAE,CAAC,OAAO,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,MAAM,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,kBAAW,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAE7D,OAAO,UAAU,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,WAAW;QACpB,IAAI,CAAC,GAAoB,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAClD,OAAO,MAAM,CAAC,CAAC,iBAAiB,EAAE,CAAC;IACvC,CAAC;CACJ;AAxBD,gCAwBC","sourcesContent":["\n/*\nCopyright 2023 Norman Breau \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport {\n    FusePlugin,\n    ContentType,\n    FuseAPIResponse\n} from '@nbsfuse/core';\n\nexport class EchoPlugin extends FusePlugin {\n    protected override _getID(): string {\n        return 'echo';\n    }\n\n    public async echo(message: string): Promise<string> {\n        let r: FuseAPIResponse = await this._exec('/echo', ContentType.TEXT, message);\n        return await r.readAsText();\n    }\n\n    public async subscribe(cb: (data: string) => void): Promise<string> {\n        let callbackID: string = this._createCallback((payload: string) => {\n            cb(payload);\n        });\n\n        await this._exec('/subscribe', ContentType.TEXT, callbackID);\n\n        return callbackID;\n    }\n\n    public async bigResponse(): Promise<ArrayBuffer> {\n        let r: FuseAPIResponse = await this._exec('/big');\n        return await r.readAsArrayBuffer();\n    }\n}\n"]}