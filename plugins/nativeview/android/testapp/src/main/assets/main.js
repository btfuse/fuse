/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../../../js/lib/api.js":
/*!******************************!*\
  !*** ../../../js/lib/api.js ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


/*
   Copyright 2023 Breautek

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const core_1 = __webpack_require__(/*! @btfuse/core */ "../../../js/lib/api.js");
const native_view_1 = __webpack_require__(/*! @btfuse/native-view */ "../lib/api.js");
let plugin;
let node = null;
window.onload = async () => {
    let builder = new core_1.FuseContextBuilder();
    let context = await builder.build();
    plugin = new native_view_1.FuseNativeViewPlugin(context);
    let n = document.createElement('div');
    document.body.appendChild(n);
    n.style.width = '300px';
    n.style.height = '400px';
    n.style.position = 'absolute';
    n.style.left = '25px';
    n.style.top = '25px';
    n.style.outline = '1px solid blue';
    node = await plugin.create(n, {
        overlayFile: '/assets/overlay.html'
    });
    document.body.addEventListener('click', () => {
        if (!node) {
            return;
        }
        // console.log('Destroying node!', node.getID());
        // node.destroy();
        // node = null;
        n.style.top = '100px';
    });
};


/***/ }),

/***/ "../lib/api.js":
/*!*********************!*\
  !*** ../lib/api.js ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


/*
   Copyright 2023 Breautek

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const core_1 = __webpack_require__(/*! @btfuse/core */ "../../../js/lib/api.js");
const native_view_1 = __webpack_require__(/*! @btfuse/native-view */ "../lib/api.js");
let plugin;
let node = null;
window.onload = async () => {
    let builder = new core_1.FuseContextBuilder();
    let context = await builder.build();
    plugin = new native_view_1.FuseNativeViewPlugin(context);
    let n = document.createElement('div');
    document.body.appendChild(n);
    n.style.width = '300px';
    n.style.height = '400px';
    n.style.position = 'absolute';
    n.style.left = '25px';
    n.style.top = '25px';
    n.style.outline = '1px solid blue';
    node = await plugin.create(n, {
        overlayFile: '/assets/overlay.html'
    });
    document.body.addEventListener('click', () => {
        if (!node) {
            return;
        }
        // console.log('Destroying node!', node.getID());
        // node.destroy();
        // node = null;
        n.style.top = '100px';
    });
};


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;
/*!********************!*\
  !*** ./src/App.ts ***!
  \********************/

/*
   Copyright 2023 Breautek

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const core_1 = __webpack_require__(/*! @btfuse/core */ "../../../js/lib/api.js");
const native_view_1 = __webpack_require__(/*! @btfuse/native-view */ "../lib/api.js");
let plugin;
let node = null;
window.onload = async () => {
    let builder = new core_1.FuseContextBuilder();
    let context = await builder.build();
    plugin = new native_view_1.FuseNativeViewPlugin(context);
    let n = document.createElement('div');
    document.body.appendChild(n);
    n.style.width = '300px';
    n.style.height = '400px';
    n.style.position = 'absolute';
    n.style.left = '25px';
    n.style.top = '25px';
    n.style.outline = '1px solid blue';
    node = await plugin.create(n, {
        overlayFile: '/assets/overlay.html'
    });
    document.body.addEventListener('click', () => {
        if (!node) {
            return;
        }
        // console.log('Destroying node!', node.getID());
        // node.destroy();
        // node = null;
        n.style.top = '100px';
    });
};

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,